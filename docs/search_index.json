[["index.html", "Factor coding, contrasts, and the emmeans package Overview 0.1 Learning goals:", " Factor coding, contrasts, and the emmeans package Wesley Brooks 2021-10-13 Overview I get a ton of questions from about factor variables in regression models. Two of the most common are: - Why is there a factor level missing from the results table for my regression model? - Why does my Stan model fail to “mix” or converge when this factor variable is included? I’m going to show you what is the deal with factor variables, in hopes that it will help you in your research, and that you can pass on the intuition when a colleague comes to you asking strange questions about factor variables. 0.1 Learning goals: Understand why factor variables get handled in a special way Learn about the contrasts that are built into R Demonstrate the basics of the emmeans package for analyzing factors in model fits "],["factor-coding.html", "1 Factor coding 1.1 How factors are coded in a model 1.2 The default", " 1 Factor coding factor is R’s name for a categorical variable. Let’s see an example. The chickwts data set is built into R, and records the results of a 1948 experiment where chicks were fed on different diets, and their weights were measured in grams at six weeks of age. # load the chickwts dataset and look at the top rows data( chickwts ) head( chickwts ) ## weight feed ## 1 179 horsebean ## 2 160 horsebean ## 3 136 horsebean ## 4 227 horsebean ## 5 217 horsebean ## 6 168 horsebean # look at the feed variable - it&#39;s a factor chickwts$feed ## [1] horsebean horsebean horsebean horsebean horsebean horsebean horsebean ## [8] horsebean horsebean horsebean linseed linseed linseed linseed ## [15] linseed linseed linseed linseed linseed linseed linseed ## [22] linseed soybean soybean soybean soybean soybean soybean ## [29] soybean soybean soybean soybean soybean soybean soybean ## [36] soybean sunflower sunflower sunflower sunflower sunflower sunflower ## [43] sunflower sunflower sunflower sunflower sunflower sunflower meatmeal ## [50] meatmeal meatmeal meatmeal meatmeal meatmeal meatmeal meatmeal ## [57] meatmeal meatmeal meatmeal casein casein casein casein ## [64] casein casein casein casein casein casein casein ## [71] casein ## Levels: casein horsebean linseed meatmeal soybean sunflower # make a boxplot of weight vs. feed boxplot( weight ~ feed, data=chickwts ) There are six different types of feed: casein, horsebean, linseed, meatmeal, soybean, and sunflower. Now see what happens when I fit a linear model to this data: # create a linear model using the default coding, look at its summary lm_default = lm( weight ~ feed, data=chickwts ) summary( lm_default ) ## ## Call: ## lm(formula = weight ~ feed, data = chickwts) ## ## Residuals: ## Min 1Q Median 3Q Max ## -123.909 -34.413 1.571 38.170 103.091 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 323.583 15.834 20.436 &lt; 2e-16 *** ## feedhorsebean -163.383 23.485 -6.957 2.07e-09 *** ## feedlinseed -104.833 22.393 -4.682 1.49e-05 *** ## feedmeatmeal -46.674 22.896 -2.039 0.045567 * ## feedsoybean -77.155 21.578 -3.576 0.000665 *** ## feedsunflower 5.333 22.393 0.238 0.812495 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 54.85 on 65 degrees of freedom ## Multiple R-squared: 0.5417, Adjusted R-squared: 0.5064 ## F-statistic: 15.36 on 5 and 65 DF, p-value: 5.936e-10 The casein feed isn’t shown in the results! And most of the feed types that are shown would give the chicks negative weights, which is clearly absurd. What gives?! 1.1 How factors are coded in a model The short answer is that the intercept here is actually the average weight of chicks on the casein feed, and everything else is the difference from casein. So based on the first two lines of the result table, chicks on casein feed weigh 323 grams on average, and those on the horsebean feed weigh 163 grams less than that, or 160 grams. Those numbers shold make sense based on the boxplot. But why are the results reported in such a weird way? 1.1.1 The linear algebra explanation Imagine that your factor variable has three levels, and call them A, B, and C. You’re estimating how a continuous variable (like chick weight) depends on the factor level (like chick feed). You typically use an intercept to represent the overall average weight (aka the “grand mean”), so that you can then test whether any factor levels are different from average. This leads to a model where the grand mean \\(\\mu\\) and the factor levels \\(A\\), \\(B\\), and \\(C\\) represent the average weights, with some random noise added in, too. That’s written like this: This system of equations can’t be solved (too many unknowns) so we work with the average of each group (A, B, C). To do so, we assume that the average error is zero within each group, so the group means can each be written as the sum of the grand mean and the group effect: Now we are down to three equations with four unknowns - close but not good enough! Another way to write that same system of equations is this, which will be a bit more productive going forward: We have to reduce the number of unknowns by one. We do so by introducing a constraint on the coefficients, which allows us to remove a column from the “design matrix” in the figure above. 1.2 The default By default, R will drop the column that represents the first level of each factor. This is called a “treatment contrast” (more on contrasts later) or the set-to-zero constraint (because it is like constraining the \\(A\\) effect to be zero): Now we’ll look back at the model summary table, where the “first” level of the factor (casein) doesn’t appear. That’s because it is set to zero in order to estimate the model. Since casein is swept into the intercept, we find the average weight of a chick fed on horsebeans by adding the (Intercept) and feedhorsebean coefficients, as you would predict from the design matrix of the set-to-zero constraint. "],["constraints.html", "2 Constraints 2.1 contr.treatment 2.2 “One-hot” encoding 2.3 contr.sum: sum-to-zero constraints 2.4 contr.poly 2.5 contr.helmert and contr.SAS", " 2 Constraints There are only a few constraints (R calls them “contrasts”) to know: 2.1 contr.treatment The default. Sets a level of the factor to have zero effect. You saw an example of the design matrix just a moment ago. Take a look at the design matrix according to R: # look at the default coding of feed contrasts( chickwts$feed ) ## horsebean linseed meatmeal soybean sunflower ## casein 0 0 0 0 0 ## horsebean 1 0 0 0 0 ## linseed 0 1 0 0 0 ## meatmeal 0 0 1 0 0 ## soybean 0 0 0 1 0 ## sunflower 0 0 0 0 1 2.2 “One-hot” encoding You can do this yourself by removing the intercept. You gain interpretability, but now the significance level is telling you whether the factor level mean is different from zero (you usually want to know if it is different from average). # fit a version of the model for chick weight that has no intercept lm_nointercept = lm( weight ~ feed - 1, data=chickwts ) summary( lm_nointercept ) ## ## Call: ## lm(formula = weight ~ feed - 1, data = chickwts) ## ## Residuals: ## Min 1Q Median 3Q Max ## -123.909 -34.413 1.571 38.170 103.091 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## feedcasein 323.58 15.83 20.436 &lt; 2e-16 *** ## feedhorsebean 160.20 17.35 9.236 1.91e-13 *** ## feedlinseed 218.75 15.83 13.815 &lt; 2e-16 *** ## feedmeatmeal 276.91 16.54 16.744 &lt; 2e-16 *** ## feedsoybean 246.43 14.66 16.810 &lt; 2e-16 *** ## feedsunflower 328.92 15.83 20.773 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 54.85 on 65 degrees of freedom ## Multiple R-squared: 0.9629, Adjusted R-squared: 0.9595 ## F-statistic: 281.4 on 6 and 65 DF, p-value: &lt; 2.2e-16 2.3 contr.sum: sum-to-zero constraints With sum-to-zero constraint, the factor level effects must add up to zero. Thus, the intercept represents the average of the fitted factor effects, and the final level is calculated by adding together all of the shown estimates. You can set the contrasts as an attribute of the data or pass it to the lm() function. # set the feed variable to use sum-to-zero constraint contrasts( chickwts$feed ) = contr.sum chickwts$feed ## [1] horsebean horsebean horsebean horsebean horsebean horsebean horsebean ## [8] horsebean horsebean horsebean linseed linseed linseed linseed ## [15] linseed linseed linseed linseed linseed linseed linseed ## [22] linseed soybean soybean soybean soybean soybean soybean ## [29] soybean soybean soybean soybean soybean soybean soybean ## [36] soybean sunflower sunflower sunflower sunflower sunflower sunflower ## [43] sunflower sunflower sunflower sunflower sunflower sunflower meatmeal ## [50] meatmeal meatmeal meatmeal meatmeal meatmeal meatmeal meatmeal ## [57] meatmeal meatmeal meatmeal casein casein casein casein ## [64] casein casein casein casein casein casein casein ## [71] casein ## attr(,&quot;contrasts&quot;) ## [,1] [,2] [,3] [,4] [,5] ## casein 1 0 0 0 0 ## horsebean 0 1 0 0 0 ## linseed 0 0 1 0 0 ## meatmeal 0 0 0 1 0 ## soybean 0 0 0 0 1 ## sunflower -1 -1 -1 -1 -1 ## Levels: casein horsebean linseed meatmeal soybean sunflower # re-fit the linear model lm_stz = lm(weight ~ feed, data=chickwts) summary( lm_stz ) ## ## Call: ## lm(formula = weight ~ feed, data = chickwts) ## ## Residuals: ## Min 1Q Median 3Q Max ## -123.909 -34.413 1.571 38.170 103.091 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 259.131 6.543 39.602 &lt; 2e-16 *** ## feed1 64.452 14.490 4.448 3.47e-05 *** ## feed2 -98.931 15.601 -6.341 2.48e-08 *** ## feed3 -40.381 14.490 -2.787 0.00697 ** ## feed4 17.778 15.005 1.185 0.24042 ## feed5 -12.703 13.641 -0.931 0.35519 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 54.85 on 65 degrees of freedom ## Multiple R-squared: 0.5417, Adjusted R-squared: 0.5064 ## F-statistic: 15.36 on 5 and 65 DF, p-value: 5.936e-10 # calculate the missing coefficient sum( coef(lm_stz)[[1]] - sum( coef(lm_stz)[2:6]) ) ## [1] 328.9167 2.4 contr.poly This one is for ordered factors, and gets a bit more complicated. Beyond today’s scope. 2.5 contr.helmert and contr.SAS Used in special situations that I wont get into, but you can infer their workings by looking at how they set up the design matrix for our example: # set the helmert contrast and look at its design contrasts( chickwts$feed ) = contr.helmert chickwts$feed ## [1] horsebean horsebean horsebean horsebean horsebean horsebean horsebean ## [8] horsebean horsebean horsebean linseed linseed linseed linseed ## [15] linseed linseed linseed linseed linseed linseed linseed ## [22] linseed soybean soybean soybean soybean soybean soybean ## [29] soybean soybean soybean soybean soybean soybean soybean ## [36] soybean sunflower sunflower sunflower sunflower sunflower sunflower ## [43] sunflower sunflower sunflower sunflower sunflower sunflower meatmeal ## [50] meatmeal meatmeal meatmeal meatmeal meatmeal meatmeal meatmeal ## [57] meatmeal meatmeal meatmeal casein casein casein casein ## [64] casein casein casein casein casein casein casein ## [71] casein ## attr(,&quot;contrasts&quot;) ## [,1] [,2] [,3] [,4] [,5] ## casein -1 -1 -1 -1 -1 ## horsebean 1 -1 -1 -1 -1 ## linseed 0 2 -1 -1 -1 ## meatmeal 0 0 3 -1 -1 ## soybean 0 0 0 4 -1 ## sunflower 0 0 0 0 5 ## Levels: casein horsebean linseed meatmeal soybean sunflower # set feed to use the SAS contrast and look at its design contrasts( chickwts$feed ) = contr.SAS chickwts$feed ## [1] horsebean horsebean horsebean horsebean horsebean horsebean horsebean ## [8] horsebean horsebean horsebean linseed linseed linseed linseed ## [15] linseed linseed linseed linseed linseed linseed linseed ## [22] linseed soybean soybean soybean soybean soybean soybean ## [29] soybean soybean soybean soybean soybean soybean soybean ## [36] soybean sunflower sunflower sunflower sunflower sunflower sunflower ## [43] sunflower sunflower sunflower sunflower sunflower sunflower meatmeal ## [50] meatmeal meatmeal meatmeal meatmeal meatmeal meatmeal meatmeal ## [57] meatmeal meatmeal meatmeal casein casein casein casein ## [64] casein casein casein casein casein casein casein ## [71] casein ## attr(,&quot;contrasts&quot;) ## 1 2 3 4 5 ## casein 1 0 0 0 0 ## horsebean 0 1 0 0 0 ## linseed 0 0 1 0 0 ## meatmeal 0 0 0 1 0 ## soybean 0 0 0 0 1 ## sunflower 0 0 0 0 0 ## Levels: casein horsebean linseed meatmeal soybean sunflower "],["emmeans.html", "3 emmeans 3.1 Simplest case: single factor variable 3.2 A slightly more complex model", " 3 emmeans Rather than think at all about design matrices, you can use the emmeans package to extract fitted factor levels and differences from your model. This works with a lot of modeling packages, including lme4 and brms. # import the package emmeans library( &quot;emmeans&quot; ) 3.1 Simplest case: single factor variable We can see the basic functionality even with an ultra-simple model like the ones we’ve made for chicken feed: # look at the mean fits for the default model emmeans( lm_default, specs= ~feed ) ## feed emmean SE df lower.CL upper.CL ## casein 324 15.8 65 292 355 ## horsebean 160 17.3 65 126 195 ## linseed 219 15.8 65 187 250 ## meatmeal 277 16.5 65 244 310 ## soybean 246 14.7 65 217 276 ## sunflower 329 15.8 65 297 361 ## ## Confidence level used: 0.95 Now the factor coding doesn’t matter - we get the same result for the model with no intercept and the one using a sum-to-zero constraint: # look at the mean fits for the no intercept model emmeans( lm_nointercept, specs= ~feed ) ## feed emmean SE df lower.CL upper.CL ## casein 324 15.8 65 292 355 ## horsebean 160 17.3 65 126 195 ## linseed 219 15.8 65 187 250 ## meatmeal 277 16.5 65 244 310 ## soybean 246 14.7 65 217 276 ## sunflower 329 15.8 65 297 361 ## ## Confidence level used: 0.95 # look at the mean fits for the sum-to-zero model emmeans( lm_stz, specs= ~feed ) ## feed emmean SE df lower.CL upper.CL ## casein 324 15.8 65 292 355 ## horsebean 160 17.3 65 126 195 ## linseed 219 15.8 65 187 250 ## meatmeal 277 16.5 65 244 310 ## soybean 246 14.7 65 217 276 ## sunflower 329 15.8 65 297 361 ## ## Confidence level used: 0.95 A slightly more complex result comes when you look at differences between levels: # use emmeans to calculate differences between feed levels emmeans( lm_default, specs= pairwise ~ feed ) ## $emmeans ## feed emmean SE df lower.CL upper.CL ## casein 324 15.8 65 292 355 ## horsebean 160 17.3 65 126 195 ## linseed 219 15.8 65 187 250 ## meatmeal 277 16.5 65 244 310 ## soybean 246 14.7 65 217 276 ## sunflower 329 15.8 65 297 361 ## ## Confidence level used: 0.95 ## ## $contrasts ## contrast estimate SE df t.ratio p.value ## casein - horsebean 163.38 23.5 65 6.957 &lt;.0001 ## casein - linseed 104.83 22.4 65 4.682 0.0002 ## casein - meatmeal 46.67 22.9 65 2.039 0.3325 ## casein - soybean 77.15 21.6 65 3.576 0.0084 ## casein - sunflower -5.33 22.4 65 -0.238 0.9999 ## horsebean - linseed -58.55 23.5 65 -2.493 0.1413 ## horsebean - meatmeal -116.71 24.0 65 -4.870 0.0001 ## horsebean - soybean -86.23 22.7 65 -3.797 0.0042 ## horsebean - sunflower -168.72 23.5 65 -7.184 &lt;.0001 ## linseed - meatmeal -58.16 22.9 65 -2.540 0.1277 ## linseed - soybean -27.68 21.6 65 -1.283 0.7933 ## linseed - sunflower -110.17 22.4 65 -4.920 0.0001 ## meatmeal - soybean 30.48 22.1 65 1.379 0.7391 ## meatmeal - sunflower -52.01 22.9 65 -2.271 0.2207 ## soybean - sunflower -82.49 21.6 65 -3.823 0.0039 ## ## P value adjustment: tukey method for comparing a family of 6 estimates 3.2 A slightly more complex model In order to illustrate a couple other features of emmeans, we must have a more complex model. Here, I’ll use the mtcars data set, which contains various measurements of cars by Motor Trend magazine from 1974. All of the measurements are numeric, but I will recode a few as factors: number of cylinders (cyl), number of drive gears (gear), and whether the transmission is manual or automatic (am). My output will be miles per gallon (mpg), and I’ll also use cylinder displacement (disp) as a non-factor input # load the mtcars data data( mtcars ) # code cyl, gear, and am as factors: mtcars$cyl = as.factor( mtcars$cyl ) mtcars$am = as.factor( mtcars$am ) # fit a model for mpg using cyl*disp*am lm_mpg = lm( mpg ~ cyl*disp*am, data=mtcars ) # show the model summary summary( lm_mpg ) ## ## Call: ## lm(formula = mpg ~ cyl * disp * am, data = mtcars) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.4464 -1.1002 0.0000 0.9708 5.0264 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 9.73061 16.03771 0.607 0.5509 ## cyl6 4.39364 17.20985 0.255 0.8011 ## cyl8 12.71407 16.42646 0.774 0.4480 ## disp 0.09693 0.11763 0.824 0.4196 ## am1 35.45813 16.55312 2.142 0.0447 * ## cyl6:disp -0.07248 0.12139 -0.597 0.5571 ## cyl8:disp -0.11761 0.11803 -0.996 0.3310 ## cyl6:am1 -42.44905 34.34639 -1.236 0.2308 ## cyl8:am1 -47.71882 27.35758 -1.744 0.0965 . ## disp:am1 -0.27974 0.12520 -2.234 0.0370 * ## cyl6:disp:am1 0.34196 0.22929 1.491 0.1515 ## cyl8:disp:am1 0.31642 0.14174 2.232 0.0372 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.324 on 20 degrees of freedom ## Multiple R-squared: 0.9041, Adjusted R-squared: 0.8513 ## F-statistic: 17.14 on 11 and 20 DF, p-value: 7.706e-08 This model allows illustration of some other features of emmeans. For instance, how to stratify results based on another factor, and how to calculate model slopes at different levels of an interaction: # look at mileage for the different cylinder counts, # but consider auto and manual transmission carss separately: emmeans( lm_mpg, specs = ~cyl|am ) ## NOTE: Results may be misleading due to involvement in interactions ## am = 0: ## cyl emmean SE df lower.CL upper.CL ## 4 32.09 11.24 20 8.65 55.5 ## 6 19.76 1.40 20 16.84 22.7 ## 8 17.67 1.41 20 14.74 20.6 ## ## am = 1: ## cyl emmean SE df lower.CL upper.CL ## 4 3.01 5.94 20 -9.38 15.4 ## 6 27.13 14.43 20 -2.97 57.2 ## 8 13.88 6.47 20 0.37 27.4 ## ## Confidence level used: 0.95 # calculate the slope of disp at different cyl, am levels: emtrends( lm_mpg, specs = ~ cyl|am, var=&quot;disp&quot;) ## am = 0: ## cyl disp.trend SE df lower.CL upper.CL ## 4 0.0969 0.11763 20 -0.1484 0.342293 ## 6 0.0244 0.02999 20 -0.0381 0.086997 ## 8 -0.0207 0.00976 20 -0.0410 -0.000329 ## ## am = 1: ## cyl disp.trend SE df lower.CL upper.CL ## 4 -0.1828 0.04289 20 -0.2723 -0.093342 ## 6 0.0867 0.18974 20 -0.3091 0.482450 ## 8 0.0160 0.06573 20 -0.1211 0.153103 ## ## Confidence level used: 0.95 And there’s a lot more to emmeans than that, but we have to stop here. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
